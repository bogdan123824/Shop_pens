import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Image,
  Alert,
  ActivityIndicator,
  Keyboard,
  ScrollView,
  TouchableWithoutFeedback,
  StyleSheet,
} from "react-native";
import * as ImagePicker from "expo-image-picker";

const API_URL = "https://05ed-84-245-121-100.ngrok-free.app"; 

const AddPenScreen: React.FC = () => {
  const [name, setName] = useState("");
  const [cost, setCost] = useState("");
  const [description, setDescription] = useState("");
  const [image, setImage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [sellerId, setSellerId] = useState("1");

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled) {
      const selectedImageUri = result.assets[0].uri;
      const fileType = selectedImageUri.split(".").pop()?.toLowerCase();

      const allowedTypes = ["jpg", "jpeg", "png"];

      if (fileType && allowedTypes.includes(fileType)) {
        setImage(selectedImageUri);
      } else {
        Alert.alert("‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (JPG, JPEG, PNG)!");
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const handleCostChange = (text: string) => {
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    const formattedText = text.replace(",", ".");
    setCost(formattedText);
  };

  const addPen = async () => {
    if (!name || !cost || !description || !sellerId) {
      Alert.alert("‚ö†Ô∏è –û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
      return;
    }

    setLoading(true);

    try {
      const formData = new FormData();
      formData.append("name", name);
      formData.append("description", description);
      formData.append("price", cost); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å —Ç–æ—á–∫–æ–π
      formData.append("seller_id", sellerId);

      if (image) {
        const fileType = image.split(".").pop();
        formData.append("image", {
          uri: image,
          name: `pen.${fileType}`,
          type: `image/${fileType}`,
        } as any);
      }

      const response = await fetch(`${API_URL}/add_pen`, {
        method: "POST",
        body: formData,
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${errorText}`);
      }

      Alert.alert("‚úÖ –£—Å–ø–µ—Ö", "–†—É—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
      setName("");
      setCost("");
      setDescription("");
      setImage(null);
      Keyboard.dismiss(); 
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞:", error);
      Alert.alert("‚ùå –û—à–∏–±–∫–∞", error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <ScrollView contentContainerStyle={styles.container}>
        <Text style={styles.title}>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä—É—á–∫—É</Text>

        <TextInput
          style={styles.input}
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
          placeholderTextColor={"gray"}
          value={name}
          onChangeText={setName}
        />
        <TextInput
          style={styles.input}
          placeholder="–¶–µ–Ω–∞"
          placeholderTextColor={"gray"}
          keyboardType="decimal-pad" // –ò—Å–ø–æ–ª—å–∑—É–µ–º decimal-pad, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–æ—á–∫—É
          value={cost}
          onChangeText={handleCostChange} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        />
        <TextInput
          style={[styles.input, styles.textArea]}
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
          placeholderTextColor={"gray"}
          multiline
          value={description}
          onChangeText={setDescription}
        />

        <TouchableOpacity style={styles.imagePicker} onPress={pickImage}>
          <Text style={styles.imagePickerText}>üì∑ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</Text>
        </TouchableOpacity>

        {image && <Image source={{ uri: image }} style={styles.image} />}

        <TouchableOpacity
          style={[styles.button, loading && styles.buttonDisabled]}
          onPress={addPen}
          disabled={loading}
        >
          {loading ? <ActivityIndicator color="#fff" /> : <Text style={styles.buttonText}>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä—É—á–∫—É</Text>}
        </TouchableOpacity>
      </ScrollView>
    </TouchableWithoutFeedback>
  );
};

export default AddPenScreen;

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: "#f9f9f9",
    alignItems: "center",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 20,
    color: "#333",
    marginTop: 25,
  },
  input: {
    width: "100%",
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 10,
    padding: 12,
    fontSize: 16,
    backgroundColor: "#fff",
    marginBottom: 12,
  },
  textArea: {
    height: 100,
    textAlignVertical: "top",
  },
  imagePicker: {
    backgroundColor: "#007bff",
    padding: 12,
    borderRadius: 10,
    alignItems: "center",
    marginBottom: 12,
    width: "100%",
  },
  imagePickerText: {
    color: "#fff",
    fontSize: 16,
  },
  image: {
    width: "100%",
    height: 200,
    borderRadius: 10,
    marginBottom: 12,
  },
  button: {
    backgroundColor: "#28a745",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
    width: "100%",
  },
  buttonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
  buttonDisabled: {
    backgroundColor: "#ccc",
  },
});
